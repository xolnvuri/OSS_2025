{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvWpt0QO2YT5c6qd53r2iM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xolnvuri/OSS_2025/blob/main/%EB%B6%80%EC%82%B0%EC%8B%9C%20%EB%85%B8%EC%9D%B8%EB%B3%B5%EC%A7%80%EA%B4%80%20%ED%98%84%ED%99%A9\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0ALvT4VZBud-"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "\n",
        "# 데이터를 DataFrame으로 변환\n",
        "data_lines = data.split(\"\\n\")\n",
        "columns = data_lines[0].split(\"   \")\n",
        "rows = [line.split(\"   \") for line in data_lines[1:] if line]\n",
        "df = pd.DataFrame(rows, columns=columns)\n",
        "\n",
        "# 주소에서 지역구 추출\n",
        "df[\"지역구\"] = df[\"주소\"].apply(lambda x: x.split(\" \")[1])\n",
        "\n",
        "# 지역구별 노인복지관 개수 계산\n",
        "region_counts = df[\"지역구\"].value_counts().reset_index()\n",
        "region_counts.columns = [\"지역구\", \"노인복지관 수\"]\n",
        "\n",
        "# 보기 쉬운 표 출력\n",
        "from IPython.display import display\n",
        "\n",
        "display(region_counts)\n"
      ]
    },
    {
      "source": [
        "# Assuming your DataFrame is named 'df'\n",
        "column_mapping = {\n",
        "    '시설명': 'Facility Name',\n",
        "    '시설장명': 'Facility Director Name',\n",
        "    '주소': 'Address',\n",
        "    '전화번호': 'Phone Number',\n",
        "    '운영단체명': 'Operating Organization Name',\n",
        "    '운영단체구분내용': 'Operating Organization Category',\n",
        "    '홈페이지URL주소': 'Website URL',\n",
        "    '경도': 'Longitude',\n",
        "    '위도': 'Latitude',\n",
        "    '지역구': 'District'  # If you have this column\n",
        "}\n",
        "\n",
        "df = df.rename(columns=column_mapping)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "3bJtFRqVDXao"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "8J31wWtZE71i"
      }
    },
    {
      "source": [
        "# Task\n",
        "Tell me about this dataset.\n",
        "\n",
        "Here is all the data you need:\n",
        "\"부산광역시_노인복지관 현황.txt\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "hp_yxa3LPeKY"
      }
    },
    {
      "source": [
        "## Data loading\n",
        "\n",
        "### Subtask:\n",
        "Load the dataset \"부산광역시_노인복지관 현황.txt\" into a pandas DataFrame.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "HKqRT6GJPeaU"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Load the dataset into a pandas DataFrame, handling potential encoding issues.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "hpIUx1URPeqK"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv('부산광역시_노인복지관 현황.txt', encoding='utf-8')\n",
        "except UnicodeDecodeError:\n",
        "    try:\n",
        "        df = pd.read_csv('부산광역시_노인복지관 현황.txt', encoding='cp949')\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n",
        "        df = None\n",
        "\n",
        "if df is not None:\n",
        "    display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "O7PLe17hPe56",
        "outputId": "cc2b7684-ac27-4ff1-a045-7787885c6374"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도\n",
              "0  중구노인복지관   이희배   부산광역시 중구 책방골목길3-1   051-241-25...             \n",
              "1  중구노인복지관분관   이희배   부산광역시 중구 영주로 8-1   051-462-0...             \n",
              "2  부민노인복지관   김문희   부산광역시 서구 부용로 30   051-240-3531...             \n",
              "3  서구노인복지관   강동인   부산광역시 서구 장군산로46번길21   051-240-...             \n",
              "4  동구노인종합복지관   김채영   부산광역시 동구 홍곡중로5번길24   051-467...             "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-898590ab-847b-4f0e-9c63-bf038e195780\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>중구노인복지관   이희배   부산광역시 중구 책방골목길3-1   051-241-25...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>중구노인복지관분관   이희배   부산광역시 중구 영주로 8-1   051-462-0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>부민노인복지관   김문희   부산광역시 서구 부용로 30   051-240-3531...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>서구노인복지관   강동인   부산광역시 서구 장군산로46번길21   051-240-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>동구노인종합복지관   김채영   부산광역시 동구 홍곡중로5번길24   051-467...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-898590ab-847b-4f0e-9c63-bf038e195780')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-898590ab-847b-4f0e-9c63-bf038e195780 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-898590ab-847b-4f0e-9c63-bf038e195780');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3a1e580e-9316-4802-b655-88771d77d539\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a1e580e-9316-4802-b655-88771d77d539')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3a1e580e-9316-4802-b655-88771d77d539 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\uc2dc\\uc124\\uba85   \\uc2dc\\uc124\\uc7a5\\uba85   \\uc8fc\\uc18c   \\uc804\\ud654\\ubc88\\ud638   \\uc6b4\\uc601\\ub2e8\\uccb4\\uba85   \\uc6b4\\uc601\\ub2e8\\uccb4\\uad6c\\ubd84\\ub0b4\\uc6a9   \\ud648\\ud398\\uc774\\uc9c0URL\\uc8fc\\uc18c   \\uacbd\\ub3c4   \\uc704\\ub3c4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uc911\\uad6c\\ub178\\uc778\\ubcf5\\uc9c0\\uad00\\ubd84\\uad00   \\uc774\\ud76c\\ubc30   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\uc911\\uad6c \\uc601\\uc8fc\\ub85c 8-1   051-462-0316   \\ub85c\\uc0ac\\ub9ac\\uc624 \\uce74\\ub9ac\\ud0c0\\uc2a4   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   www.junggusilver.or.kr   129.0325002   35.11016227\",\n          \"\\ub3d9\\uad6c\\ub178\\uc778\\uc885\\ud569\\ubcf5\\uc9c0\\uad00   \\uae40\\ucc44\\uc601   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\ub3d9\\uad6c \\ud64d\\uace1\\uc911\\ub85c5\\ubc88\\uae3824   051-467-7887   \\uc0c8\\uc0d8\\ubcf5\\uc9c0\\uc7ac\\ub2e8   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   www.hyojason.or.kr   129.0404219   35.12580585\",\n          \"\\ubd80\\ubbfc\\ub178\\uc778\\ubcf5\\uc9c0\\uad00   \\uae40\\ubb38\\ud76c   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\uc11c\\uad6c \\ubd80\\uc6a9\\ub85c 30   051-240-3531   \\ubd88\\uad6d\\ud1a0   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   bmsenior.bulgukto.or.kr   129.0180414   35.10743629\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data exploration\n",
        "\n",
        "### Subtask:\n",
        "Explore the loaded dataset to understand its characteristics.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "xyDCfaQOPiwp"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Explore the dataset by examining its shape, data types, missing values, column descriptions, and basic statistics for numerical and categorical features.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "g9LVP9tuPjog"
      }
    },
    {
      "source": [
        "# Examine the shape of the DataFrame\n",
        "print(\"Shape of the DataFrame:\", df.shape)\n",
        "\n",
        "# Investigate data types\n",
        "print(\"\\nData Types:\\n\", df.dtypes)\n",
        "\n",
        "# Check for missing values\n",
        "missing_values = df.isnull().sum()\n",
        "missing_percentage = (missing_values / len(df)) * 100\n",
        "print(\"\\nMissing Values:\\n\", missing_values)\n",
        "print(\"\\nMissing Value Percentage:\\n\", missing_percentage)\n",
        "\n",
        "# Identify column names and their potential meanings\n",
        "print(\"\\nColumn Names and Potential Meanings:\")\n",
        "for col in df.columns:\n",
        "    print(f\"- {col}:  (Interpretation based on context)\")\n",
        "\n",
        "# Basic statistics for numerical columns\n",
        "numerical_cols = df.select_dtypes(include=['number'])\n",
        "if not numerical_cols.empty:\n",
        "    print(\"\\nNumerical Column Statistics:\\n\", numerical_cols.describe())\n",
        "\n",
        "# Unique values and frequencies for categorical columns\n",
        "categorical_cols = df.select_dtypes(exclude=['number'])\n",
        "for col in categorical_cols.columns:\n",
        "    print(f\"\\nUnique values and frequencies for '{col}':\\n{df[col].value_counts()}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TeBIBq_ePj4P",
        "outputId": "86554bb8-f3e2-4cfa-d6da-b528d05b6eae"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the DataFrame: (35, 1)\n",
            "\n",
            "Data Types:\n",
            " 시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도    object\n",
            "dtype: object\n",
            "\n",
            "Missing Values:\n",
            " 시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도    0\n",
            "dtype: int64\n",
            "\n",
            "Missing Value Percentage:\n",
            " 시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도    0.0\n",
            "dtype: float64\n",
            "\n",
            "Column Names and Potential Meanings:\n",
            "- 시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도:  (Interpretation based on context)\n",
            "\n",
            "Unique values and frequencies for '시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도':\n",
            "시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도\n",
            "중구노인복지관   이희배   부산광역시 중구 책방골목길3-1   051-241-2591   로사리오 카리타스   사회복지법인   www.junggusilver.or.kr   129.026183   35.10414052                1\n",
            "부산광역시노인종합복지관   임종린   부산광역시 연제구 거제천로230번길18   051-853-1872   대한노인회 부산광역시연합회   사단법인   www.youngsilver.or.kr   129.0821016   35.19110671    1\n",
            "사하사랑채노인복지관분관   윤현주   부산광역시 사하구 다대로130번길34   051-207-9544   호산나복지재단   사회복지법인   www.sahasilver.org   128.9772442   35.09159221             1\n",
            "신장림사랑채노인복지관   김동현   부산광역시 다대로 300번길8   051-266-8515   늘기쁜마을   사회복지법인   www.sjrsilver.or.kr   128.9761521   35.0754297                    1\n",
            "금정구노인복지관   조수경   부산광역시 금정구 청룡예전로 110   051-792-7200   범어   사회복지법인   www.geumjeongsilver.kr   129.0847903   35.27917441                   1\n",
            "강서구노인복지관   윤원찬   부산광역시 강서구 체육공원로 39   051-972-4851   로사리오 카리타스   사회복지법인   www.gangseosenior.or.kr   128.9734691   35.20732663            1\n",
            "가덕도동노인복지관   김익현   부산광역시 강서구 동선길 10   051-972-0048   주는사랑복지재단   사회복지법인   www.mjnoin.ai-sw.net   128.8316513   35.05664095                 1\n",
            "명지노인종합복지관   김익현   부산광역시 강서구 명지국제13로 33   051-712-7000   주는사랑복지재단   사회복지법인   www.mjnoin.ai-sw.net   128.922964   35.110585                1\n",
            "연제구노인복지관   이운철   부산광역시 연제구 고분로 188   051-863-9988   나온   사회복지법인   www.yjsilver.kr   129.1027986   35.18536723                            1\n",
            "반여분관노인복지관   정영욱   부산광역시 해운대구 선수촌로207번길 79   051-529-9141   의안복지재단   사회복지법인   banyeo.haeundaejangsan.or.kr   129.1221252   35.21107713    1\n",
            "수영구노인복지관   이병호   부산광역시 수영구 황령대로 489번길83   051-759-6070   불국토   사회복지법인   6070.bulgukto.or.kr   129.1111735   35.14004997                  1\n",
            "광안노인복지관   손정환   부산광역시 수영구 장대골로 75-8   051-715-6099   불국토   사회복지법인   6099.bulgukto.or.kr   129.1048646   35.15956873                      1\n",
            "사상구 노인복지관   김익현   부산광역시 사상구 가야대로 196번길51   051-325-7555   주는사랑복지재단   사회복지법인   www.sasang-senior.kr   128.9948438   35.14725485           1\n",
            "사상구노인복지관 분관   김익현   부산광역시 사상구 모라로 91-8   051-317-7555   주는사랑복지재단   사회복지법인   www.sasang-senior.kr   128.9858423   35.15976786             1\n",
            "기장군노인복지관   이봉규   부산광역시 기장군 기장읍 대청로22번길61   051-724-3443   기장군 도시관리공단   공단   www.nosasa.or.kr   129.2125973   35.23509949                 1\n",
            "기장군 노인복지관 일광 분관   손병수   부산광역시 기장군 일광면 이천리 930-2   051-792-4870   기장군 도시관리공단   공단   www.nosasa.or.kr   129.2367325   35.26753833          1\n",
            "사하사랑채복지관   윤현주   부산광역시 사하구 사리로 35   051-293-9544   호산나복지재단   사회복지법인   www.sahasilver.org   128.9987036   35.10300921                     1\n",
            "장산노인복지관   정영욱   부산광역시 해운대구 좌동로 126   051-704-9141   의안복지재단   사회복지법인   www.haeundaejangsan.or.kr   129.1787854   35.17384305              1\n",
            "중구노인복지관분관   이희배   부산광역시 중구 영주로 8-1   051-462-0316   로사리오 카리타스   사회복지법인   www.junggusilver.or.kr   129.0325002   35.11016227              1\n",
            "영도구노인복지관분관   박석원   부산광역시 영도구 봉래길 372   051-418-6300   혜원   사회복지법인   www.youngdosenior.or.kr   129.056705   35.09111411                   1\n",
            "부민노인복지관   김문희   부산광역시 서구 부용로 30   051-240-3531   불국토   사회복지법인   bmsenior.bulgukto.or.kr   129.0180414   35.10743629                      1\n",
            "서구노인복지관   강동인   부산광역시 서구 장군산로46번길21   051-240-3541   대한불교천태종복지재단   사회복지법인   www.woorinoin.or.kr   129.014347   35.07312369               1\n",
            "동구노인종합복지관   김채영   부산광역시 동구 홍곡중로5번길24   051-467-7887   새샘복지재단   사회복지법인   www.hyojason.or.kr   129.0404219   35.12580585                   1\n",
            "동구분관   김채영   부산광역시 동구 초량남로 12   051-714-6092   새샘복지재단   사회복지법인   www.hyojason.or.kr   129.034846   35.11956188                           1\n",
            "동구자성대노인복지관   이은숙   부산광역시 동구 자성로140번길32   051-632-7597   봉생사회복지회   사회복지법인   silver.bsdonggu.go.kr   129.0648411   35.13564405             1\n",
            "영도구노인복지관   박석원   부산광역시 영도구 절영로29번길14   051-417-6344   혜원   사회복지법인   www.youngdosenior.or.kr   129.0400929   35.09133006                  1\n",
            "부산진구 노인장애인복지관   한정민   부산광역시 부산진구 전포대로300번길 6 585-1   051-808-8090   주는사랑복지재단   사회복지법인   www.onbokji.org   129.0658484   35.16404711      1\n",
            "어진샘노인종합복지관   최윤정   부산광역시 해운대구 재반로12번길16   051-784-8008   인천사회사업재단   사회복지법인   www.ojin.saem.or.kr   129.1275334   35.17966779             1\n",
            "부산진구 노인복지관분관   한정민   부산광역시 부산진구 신암로135번길35   051-714-6090   주는사랑복지재단   사회복지법인   www.onbokji.org   129.0484094   35.15146279              1\n",
            "다사랑복합문화예술회관   박성일   부산광역시 부산진구 대학로60   051-891-1743   대한불교천태종복지재단   사회복지법인   www.다사랑시니어.org   129.0344581   35.1504381                   1\n",
            "동래구노인복지관   정응석   부산광역시 동래구 명륜로207번길18   051-554-6252   박영학원   학교법인   www.dnswc.or.kr   129.0819668   35.21238058                         1\n",
            "남구노인복지관   박시우   부산광역시 남구 못골로 97-10   051-628-1291   동명문화학원   학교법인   www.ngswc.or.kr   129.093257   35.13618392                           1\n",
            "문현노인복지관   변정희   부산광역시 남구 고동골로 11   051-938-9988   문수복지재단   사회복지법인   www.moonsubokji.or.kr   129.070997   35.13791                        1\n",
            "실버벨노인복지관   양인우   부산광역시 북구 시랑로114번길45   051-337-5959   장선종합복지공동체   사회복지법인   www.실버벨.kr   129.0086824   35.19427427                        1\n",
            "정관노인복지관   금동숙   부산광역시 기장군 정관읍 정관중앙로 83-14   051-792-4920   기장군 도시관리공단   공단   www.nosasa.or.kr   129.179083   35.32475608                 1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block revealed that the data is in a single column, which is not ideal. I will attempt to split the single column into multiple columns using a delimiter and then re-examine the data. I suspect the data was not correctly parsed during the initial loading step.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "oSELUhSIPlx4"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming the single column contains delimited values\n",
        "try:\n",
        "    df = pd.read_csv('부산광역시_노인복지관 현황.txt', encoding='cp949', delimiter='\\t')\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")\n",
        "    df = None\n",
        "\n",
        "if df is not None:\n",
        "    # Re-examine the shape of the DataFrame\n",
        "    print(\"Shape of the DataFrame:\", df.shape)\n",
        "\n",
        "    # Re-investigate data types\n",
        "    print(\"\\nData Types:\\n\", df.dtypes)\n",
        "\n",
        "    # Re-check for missing values\n",
        "    missing_values = df.isnull().sum()\n",
        "    missing_percentage = (missing_values / len(df)) * 100\n",
        "    print(\"\\nMissing Values:\\n\", missing_values)\n",
        "    print(\"\\nMissing Value Percentage:\\n\", missing_percentage)\n",
        "\n",
        "    # Re-Identify column names and their potential meanings\n",
        "    print(\"\\nColumn Names and Potential Meanings:\")\n",
        "    for col in df.columns:\n",
        "        print(f\"- {col}:  (Interpretation based on context)\")\n",
        "\n",
        "    # Basic statistics for numerical columns\n",
        "    numerical_cols = df.select_dtypes(include=['number'])\n",
        "    if not numerical_cols.empty:\n",
        "        print(\"\\nNumerical Column Statistics:\\n\", numerical_cols.describe())\n",
        "\n",
        "    # Unique values and frequencies for categorical columns\n",
        "    categorical_cols = df.select_dtypes(exclude=['number'])\n",
        "    for col in categorical_cols.columns:\n",
        "        print(f\"\\nUnique values and frequencies for '{col}':\\n{df[col].value_counts()}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "78e3ODD7PmBp",
        "outputId": "fe6e15d0-72af-4c9b-fbb0-ecdeee8b9418"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "An error occurred: 'cp949' codec can't decode byte 0xec in position 6: illegal multibyte sequence\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous attempts to load the data failed due to encoding issues. I will try to load the data with 'utf-16' encoding, which might resolve the issue.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "BQvppwiDPn4h"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv('부산광역시_노인복지관 현황.txt', encoding='utf-16', delimiter='\\t')\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")\n",
        "    df = None\n",
        "\n",
        "if df is not None:\n",
        "    # Re-examine the shape of the DataFrame\n",
        "    print(\"Shape of the DataFrame:\", df.shape)\n",
        "\n",
        "    # Re-investigate data types\n",
        "    print(\"\\nData Types:\\n\", df.dtypes)\n",
        "\n",
        "    # Re-check for missing values\n",
        "    missing_values = df.isnull().sum()\n",
        "    missing_percentage = (missing_values / len(df)) * 100\n",
        "    print(\"\\nMissing Values:\\n\", missing_values)\n",
        "    print(\"\\nMissing Value Percentage:\\n\", missing_percentage)\n",
        "\n",
        "    # Re-Identify column names and their potential meanings\n",
        "    print(\"\\nColumn Names and Potential Meanings:\")\n",
        "    for col in df.columns:\n",
        "        print(f\"- {col}:  (Interpretation based on context)\")\n",
        "\n",
        "    # Basic statistics for numerical columns\n",
        "    numerical_cols = df.select_dtypes(include=['number'])\n",
        "    if not numerical_cols.empty:\n",
        "        print(\"\\nNumerical Column Statistics:\\n\", numerical_cols.describe())\n",
        "\n",
        "    # Unique values and frequencies for categorical columns\n",
        "    categorical_cols = df.select_dtypes(exclude=['number'])\n",
        "    for col in categorical_cols.columns:\n",
        "        print(f\"\\nUnique values and frequencies for '{col}':\\n{df[col].value_counts()}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9iWoodAZPoIP",
        "outputId": "b76fb333-45be-495f-f472-9839b6b18a16"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "An error occurred: UTF-16 stream does not start with BOM\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data loading\n",
        "\n",
        "### Subtask:\n",
        "Load the dataset \"부산광역시_노인복지관 현황.txt\" into a pandas DataFrame.  This time, manually inspect the file to determine the correct encoding and delimiter.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "DAN7QBfpPrQy"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "I need to load the data with the correct encoding and delimiter, which can only be determined by manually inspecting the file. Since I don't have the capability to manually inspect the file, I will try different encodings and delimiters and see if any of them work.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "DAk9L5CAPsH8"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Try different encodings and delimiters\n",
        "for encoding in ['utf-8', 'cp949', 'euc-kr', 'utf-16', 'latin-1']:\n",
        "    for delimiter in [',', '\\t', ';', ' ', '|']:\n",
        "        try:\n",
        "            df = pd.read_csv('부산광역시_노인복지관 현황.txt', encoding=encoding, delimiter=delimiter)\n",
        "            print(f\"Successfully loaded with encoding '{encoding}' and delimiter '{delimiter}'\")\n",
        "            display(df.head())\n",
        "            break  # Exit the inner loop if successful\n",
        "        except Exception as e:\n",
        "            print(f\"Error with encoding '{encoding}' and delimiter '{delimiter}': {e}\")\n",
        "    else:\n",
        "        continue  # Continue to the next encoding if no delimiter worked\n",
        "    break  # Exit the outer loop if successful"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "GFkNkIdfPsXv",
        "outputId": "ff59200e-49e9-43ac-9d3a-220dffc72e4e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Successfully loaded with encoding 'utf-8' and delimiter ','\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도\n",
              "0  중구노인복지관   이희배   부산광역시 중구 책방골목길3-1   051-241-25...             \n",
              "1  중구노인복지관분관   이희배   부산광역시 중구 영주로 8-1   051-462-0...             \n",
              "2  부민노인복지관   김문희   부산광역시 서구 부용로 30   051-240-3531...             \n",
              "3  서구노인복지관   강동인   부산광역시 서구 장군산로46번길21   051-240-...             \n",
              "4  동구노인종합복지관   김채영   부산광역시 동구 홍곡중로5번길24   051-467...             "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10c1387c-68ba-4e2a-b6a1-5736fa7593dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>중구노인복지관   이희배   부산광역시 중구 책방골목길3-1   051-241-25...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>중구노인복지관분관   이희배   부산광역시 중구 영주로 8-1   051-462-0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>부민노인복지관   김문희   부산광역시 서구 부용로 30   051-240-3531...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>서구노인복지관   강동인   부산광역시 서구 장군산로46번길21   051-240-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>동구노인종합복지관   김채영   부산광역시 동구 홍곡중로5번길24   051-467...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10c1387c-68ba-4e2a-b6a1-5736fa7593dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10c1387c-68ba-4e2a-b6a1-5736fa7593dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10c1387c-68ba-4e2a-b6a1-5736fa7593dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d16d15b-9932-48d7-8373-a1aa23cf722d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d16d15b-9932-48d7-8373-a1aa23cf722d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d16d15b-9932-48d7-8373-a1aa23cf722d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    break  # Exit the outer loop if successful\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\uc2dc\\uc124\\uba85   \\uc2dc\\uc124\\uc7a5\\uba85   \\uc8fc\\uc18c   \\uc804\\ud654\\ubc88\\ud638   \\uc6b4\\uc601\\ub2e8\\uccb4\\uba85   \\uc6b4\\uc601\\ub2e8\\uccb4\\uad6c\\ubd84\\ub0b4\\uc6a9   \\ud648\\ud398\\uc774\\uc9c0URL\\uc8fc\\uc18c   \\uacbd\\ub3c4   \\uc704\\ub3c4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uc911\\uad6c\\ub178\\uc778\\ubcf5\\uc9c0\\uad00\\ubd84\\uad00   \\uc774\\ud76c\\ubc30   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\uc911\\uad6c \\uc601\\uc8fc\\ub85c 8-1   051-462-0316   \\ub85c\\uc0ac\\ub9ac\\uc624 \\uce74\\ub9ac\\ud0c0\\uc2a4   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   www.junggusilver.or.kr   129.0325002   35.11016227\",\n          \"\\ub3d9\\uad6c\\ub178\\uc778\\uc885\\ud569\\ubcf5\\uc9c0\\uad00   \\uae40\\ucc44\\uc601   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\ub3d9\\uad6c \\ud64d\\uace1\\uc911\\ub85c5\\ubc88\\uae3824   051-467-7887   \\uc0c8\\uc0d8\\ubcf5\\uc9c0\\uc7ac\\ub2e8   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   www.hyojason.or.kr   129.0404219   35.12580585\",\n          \"\\ubd80\\ubbfc\\ub178\\uc778\\ubcf5\\uc9c0\\uad00   \\uae40\\ubb38\\ud76c   \\ubd80\\uc0b0\\uad11\\uc5ed\\uc2dc \\uc11c\\uad6c \\ubd80\\uc6a9\\ub85c 30   051-240-3531   \\ubd88\\uad6d\\ud1a0   \\uc0ac\\ud68c\\ubcf5\\uc9c0\\ubc95\\uc778   bmsenior.bulgukto.or.kr   129.0180414   35.10743629\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data analysis\n",
        "\n",
        "### Subtask:\n",
        "Analyze the loaded dataset to gain insights into the characteristics of senior welfare centers in Busan.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "krjvachIPwjF"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Analyze the dataset by calculating descriptive statistics for numerical columns, analyzing categorical columns, investigating potential relationships between columns, and looking for unusual patterns.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "hTJhAOnyPynG"
      }
    },
    {
      "source": [
        "# Descriptive statistics for numerical columns (Longitude and Latitude)\n",
        "# Assuming '경도' and '위도' are the longitude and latitude columns, respectively.\n",
        "# Note: The provided df.head() shows a single column name, so renaming might be necessary based on the actual file contents.\n",
        "try:\n",
        "    df[['경도', '위도']] = df['시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도'].str.split('   ', expand=True)[[7, 8]]\n",
        "    df[['경도', '위도']] = df[['경도', '위도']].astype(float)\n",
        "    print(\"Descriptive Statistics for Numerical Columns:\\n\", df[['경도', '위도']].describe())\n",
        "except (KeyError, ValueError, AttributeError) as e:\n",
        "    print(f\"Error calculating descriptive statistics: {e}\")\n",
        "\n",
        "# Analyze categorical columns\n",
        "for col in ['시설명', '시설장명', '주소', '전화번호', '운영단체명', '운영단체구분내용', '홈페이지URL주소']:\n",
        "    try:\n",
        "        print(f\"\\nUnique values and frequencies for '{col}':\\n{df[col].value_counts()}\")\n",
        "    except KeyError as e:\n",
        "        print(f\"Error analyzing column '{col}': {e}\")\n",
        "\n",
        "# Investigate potential relationships between columns (location and organization type)\n",
        "try:\n",
        "    grouped_data = df.groupby('운영단체구분내용')[['경도', '위도']].agg(['mean', 'std'])\n",
        "    print(\"\\nRelationship between Location and Organization Type:\\n\", grouped_data)\n",
        "except KeyError as e:\n",
        "    print(f\"Error investigating relationships: {e}\")\n",
        "\n",
        "# Look for unusual patterns\n",
        "# Check for organizations operating a large number of centers\n",
        "try:\n",
        "    organization_counts = df['운영단체명'].value_counts()\n",
        "    print(\"\\nOrganizations and the Number of Centers they Operate:\\n\", organization_counts)\n",
        "except KeyError as e:\n",
        "    print(f\"Error finding unusual patterns: {e}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1-S7UckPy24",
        "outputId": "e03814a2-f964-41b0-9d00-5c9c77ede7c6"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descriptive Statistics for Numerical Columns:\n",
            "                경도         위도\n",
            "count   35.000000  35.000000\n",
            "mean   129.055287  35.154396\n",
            "std      0.079736   0.061161\n",
            "min    128.831651  35.056641\n",
            "25%    129.011515  35.108799\n",
            "50%    129.048409  35.147255\n",
            "75%    129.098028  35.188237\n",
            "max    129.236732  35.324756\n",
            "Error analyzing column '시설명': '시설명'\n",
            "Error analyzing column '시설장명': '시설장명'\n",
            "Error analyzing column '주소': '주소'\n",
            "Error analyzing column '전화번호': '전화번호'\n",
            "Error analyzing column '운영단체명': '운영단체명'\n",
            "Error analyzing column '운영단체구분내용': '운영단체구분내용'\n",
            "Error analyzing column '홈페이지URL주소': '홈페이지URL주소'\n",
            "Error investigating relationships: '운영단체구분내용'\n",
            "Error finding unusual patterns: '운영단체명'\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block failed to analyze categorical columns and investigate relationships due to column name issues.  The provided dataframe `df` seems to have only one column, which contains all the information.  We need to properly split this column into individual columns.  Then, we can re-attempt the analysis.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "vAfNKEj6P2Vu"
      }
    },
    {
      "source": [
        "# Split the single column into multiple columns based on the delimiter '   '\n",
        "try:\n",
        "    df = df['시설명   시설장명   주소   전화번호   운영단체명   운영단체구분내용   홈페이지URL주소   경도   위도'].str.split('   ', expand=True)\n",
        "    df.columns = ['시설명', '시설장명', '주소', '전화번호', '운영단체명', '운영단체구분내용', '홈페이지URL주소', '경도', '위도']\n",
        "\n",
        "    # Convert longitude and latitude to numeric\n",
        "    df[['경도', '위도']] = df[['경도', '위도']].astype(float)\n",
        "\n",
        "    # Descriptive statistics for numerical columns\n",
        "    print(\"Descriptive Statistics for Numerical Columns:\\n\", df[['경도', '위도']].describe())\n",
        "\n",
        "    # Analyze categorical columns\n",
        "    for col in ['시설명', '시설장명', '주소', '전화번호', '운영단체명', '운영단체구분내용', '홈페이지URL주소']:\n",
        "        print(f\"\\nUnique values and frequencies for '{col}':\\n{df[col].value_counts()}\")\n",
        "\n",
        "    # Investigate potential relationships between columns (location and organization type)\n",
        "    grouped_data = df.groupby('운영단체구분내용')[['경도', '위도']].agg(['mean', 'std'])\n",
        "    print(\"\\nRelationship between Location and Organization Type:\\n\", grouped_data)\n",
        "\n",
        "    # Look for unusual patterns\n",
        "    organization_counts = df['운영단체명'].value_counts()\n",
        "    print(\"\\nOrganizations and the Number of Centers they Operate:\\n\", organization_counts)\n",
        "\n",
        "except (KeyError, ValueError, AttributeError) as e:\n",
        "    print(f\"An error occurred: {e}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLmsGTrBP2lf",
        "outputId": "d06bd62d-1866-45b0-acbc-78c9fccb297f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descriptive Statistics for Numerical Columns:\n",
            "                경도         위도\n",
            "count   35.000000  35.000000\n",
            "mean   129.055287  35.154396\n",
            "std      0.079736   0.061161\n",
            "min    128.831651  35.056641\n",
            "25%    129.011515  35.108799\n",
            "50%    129.048409  35.147255\n",
            "75%    129.098028  35.188237\n",
            "max    129.236732  35.324756\n",
            "\n",
            "Unique values and frequencies for '시설명':\n",
            "시설명\n",
            "중구노인복지관            1\n",
            "부산광역시노인종합복지관       1\n",
            "사하사랑채노인복지관분관       1\n",
            "신장림사랑채노인복지관        1\n",
            "금정구노인복지관           1\n",
            "강서구노인복지관           1\n",
            "가덕도동노인복지관          1\n",
            "명지노인종합복지관          1\n",
            "연제구노인복지관           1\n",
            "반여분관노인복지관          1\n",
            "수영구노인복지관           1\n",
            "광안노인복지관            1\n",
            "사상구 노인복지관          1\n",
            "사상구노인복지관 분관        1\n",
            "기장군노인복지관           1\n",
            "기장군 노인복지관 일광 분관    1\n",
            "사하사랑채복지관           1\n",
            "장산노인복지관            1\n",
            "중구노인복지관분관          1\n",
            "영도구노인복지관분관         1\n",
            "부민노인복지관            1\n",
            "서구노인복지관            1\n",
            "동구노인종합복지관          1\n",
            "동구분관               1\n",
            "동구자성대노인복지관         1\n",
            "영도구노인복지관           1\n",
            "부산진구 노인장애인복지관      1\n",
            "어진샘노인종합복지관         1\n",
            "부산진구 노인복지관분관       1\n",
            "다사랑복합문화예술회관        1\n",
            "동래구노인복지관           1\n",
            "남구노인복지관            1\n",
            "문현노인복지관            1\n",
            "실버벨노인복지관           1\n",
            "정관노인복지관            1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '시설장명':\n",
            "시설장명\n",
            "김익현    4\n",
            "이희배    2\n",
            "박석원    2\n",
            "윤현주    2\n",
            "한정민    2\n",
            "정영욱    2\n",
            "김채영    2\n",
            "이은숙    1\n",
            "윤원찬    1\n",
            "손병수    1\n",
            "이봉규    1\n",
            "손정환    1\n",
            "이병호    1\n",
            "이운철    1\n",
            "임종린    1\n",
            "강동인    1\n",
            "조수경    1\n",
            "박성일    1\n",
            "김동현    1\n",
            "김문희    1\n",
            "최윤정    1\n",
            "양인우    1\n",
            "변정희    1\n",
            "박시우    1\n",
            "정응석    1\n",
            "금동숙    1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '주소':\n",
            "주소\n",
            "부산광역시 중구 책방골목길3-1               1\n",
            "부산광역시 연제구 거제천로230번길18           1\n",
            "부산광역시 사하구 다대로130번길34            1\n",
            "부산광역시 다대로 300번길8                1\n",
            "부산광역시 금정구 청룡예전로 110             1\n",
            "부산광역시 강서구 체육공원로 39              1\n",
            "부산광역시 강서구 동선길 10                1\n",
            "부산광역시 강서구 명지국제13로 33            1\n",
            "부산광역시 연제구 고분로 188               1\n",
            "부산광역시 해운대구 선수촌로207번길 79         1\n",
            "부산광역시 수영구 황령대로 489번길83          1\n",
            "부산광역시 수영구 장대골로 75-8             1\n",
            "부산광역시 사상구 가야대로 196번길51          1\n",
            "부산광역시 사상구 모라로 91-8              1\n",
            "부산광역시 기장군 기장읍 대청로22번길61         1\n",
            "부산광역시 기장군 일광면 이천리 930-2         1\n",
            "부산광역시 사하구 사리로 35                1\n",
            "부산광역시 해운대구 좌동로 126              1\n",
            "부산광역시 중구 영주로 8-1                1\n",
            "부산광역시 영도구 봉래길 372               1\n",
            "부산광역시 서구 부용로 30                 1\n",
            "부산광역시 서구 장군산로46번길21             1\n",
            "부산광역시 동구 홍곡중로5번길24              1\n",
            "부산광역시 동구 초량남로 12                1\n",
            "부산광역시 동구 자성로140번길32             1\n",
            "부산광역시 영도구 절영로29번길14             1\n",
            "부산광역시 부산진구 전포대로300번길 6 585-1    1\n",
            "부산광역시 해운대구 재반로12번길16            1\n",
            "부산광역시 부산진구 신암로135번길35           1\n",
            "부산광역시 부산진구 대학로60                1\n",
            "부산광역시 동래구 명륜로207번길18            1\n",
            "부산광역시 남구 못골로 97-10              1\n",
            "부산광역시 남구 고동골로 11                1\n",
            "부산광역시 북구 시랑로114번길45             1\n",
            "부산광역시 기장군 정관읍 정관중앙로 83-14       1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '전화번호':\n",
            "전화번호\n",
            "051-241-2591    1\n",
            "051-853-1872    1\n",
            "051-207-9544    1\n",
            "051-266-8515    1\n",
            "051-792-7200    1\n",
            "051-972-4851    1\n",
            "051-972-0048    1\n",
            "051-712-7000    1\n",
            "051-863-9988    1\n",
            "051-529-9141    1\n",
            "051-759-6070    1\n",
            "051-715-6099    1\n",
            "051-325-7555    1\n",
            "051-317-7555    1\n",
            "051-724-3443    1\n",
            "051-792-4870    1\n",
            "051-293-9544    1\n",
            "051-704-9141    1\n",
            "051-462-0316    1\n",
            "051-418-6300    1\n",
            "051-240-3531    1\n",
            "051-240-3541    1\n",
            "051-467-7887    1\n",
            "051-714-6092    1\n",
            "051-632-7597    1\n",
            "051-417-6344    1\n",
            "051-808-8090    1\n",
            "051-784-8008    1\n",
            "051-714-6090    1\n",
            "051-891-1743    1\n",
            "051-554-6252    1\n",
            "051-628-1291    1\n",
            "051-938-9988    1\n",
            "051-337-5959    1\n",
            "051-792-4920    1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '운영단체명':\n",
            "운영단체명\n",
            "주는사랑복지재단          6\n",
            "로사리오 카리타스         3\n",
            "불국토               3\n",
            "기장군 도시관리공단        3\n",
            "혜원                2\n",
            "새샘복지재단            2\n",
            "대한불교천태종복지재단       2\n",
            "의안복지재단            2\n",
            "호산나복지재단           2\n",
            "봉생사회복지회           1\n",
            "박영학원              1\n",
            "동명문화학원            1\n",
            "장선종합복지공동체         1\n",
            "인천사회사업재단          1\n",
            "늘기쁜마을             1\n",
            "범어                1\n",
            "대한노인회 부산광역시연합회    1\n",
            "나온                1\n",
            "문수복지재단            1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '운영단체구분내용':\n",
            "운영단체구분내용\n",
            "사회복지법인    29\n",
            "공단         3\n",
            "학교법인       2\n",
            "사단법인       1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Unique values and frequencies for '홈페이지URL주소':\n",
            "홈페이지URL주소\n",
            "www.nosasa.or.kr                3\n",
            "www.onbokji.org                 2\n",
            "www.sasang-senior.kr            2\n",
            "www.mjnoin.ai-sw.net            2\n",
            "www.sahasilver.org              2\n",
            "www.junggusilver.or.kr          2\n",
            "www.youngdosenior.or.kr         2\n",
            "www.hyojason.or.kr              2\n",
            "www.다사랑시니어.org                  1\n",
            "www.woorinoin.or.kr             1\n",
            "6099.bulgukto.or.kr             1\n",
            "6070.bulgukto.or.kr             1\n",
            "www.yjsilver.kr                 1\n",
            "www.youngsilver.or.kr           1\n",
            "www.gangseosenior.or.kr         1\n",
            "www.geumjeongsilver.kr          1\n",
            "www.sjrsilver.or.kr             1\n",
            "silver.bsdonggu.go.kr           1\n",
            "banyeo.haeundaejangsan.or.kr    1\n",
            "bmsenior.bulgukto.or.kr         1\n",
            "www.ojin.saem.or.kr             1\n",
            "www.실버벨.kr                      1\n",
            "www.moonsubokji.or.kr           1\n",
            "www.ngswc.or.kr                 1\n",
            "www.dnswc.or.kr                 1\n",
            "www.haeundaejangsan.or.kr       1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Relationship between Location and Organization Type:\n",
            "                   경도                   위도          \n",
            "                mean       std       mean       std\n",
            "운영단체구분내용                                           \n",
            "공단        129.209471  0.028952  35.275798  0.045395\n",
            "사단법인      129.082102       NaN  35.191107       NaN\n",
            "사회복지법인    129.036183  0.068064  35.139200  0.048956\n",
            "학교법인      129.087612  0.007983  35.174282  0.053879\n",
            "\n",
            "Organizations and the Number of Centers they Operate:\n",
            " 운영단체명\n",
            "주는사랑복지재단          6\n",
            "로사리오 카리타스         3\n",
            "불국토               3\n",
            "기장군 도시관리공단        3\n",
            "혜원                2\n",
            "새샘복지재단            2\n",
            "대한불교천태종복지재단       2\n",
            "의안복지재단            2\n",
            "호산나복지재단           2\n",
            "봉생사회복지회           1\n",
            "박영학원              1\n",
            "동명문화학원            1\n",
            "장선종합복지공동체         1\n",
            "인천사회사업재단          1\n",
            "늘기쁜마을             1\n",
            "범어                1\n",
            "대한노인회 부산광역시연합회    1\n",
            "나온                1\n",
            "문수복지재단            1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data visualization\n",
        "\n",
        "### Subtask:\n",
        "Create visualizations to represent the key findings from the data analysis.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "2Z1dFJYYP-Lu"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Create the visualizations as specified in the subtask instructions, using the provided dataframe `df`.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "q6TQAwC7P_Ds"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. Geographical Distribution\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.scatterplot(data=df, x='경도', y='위도', hue='운영단체구분내용', palette='viridis', s=100)\n",
        "plt.title('Geographical Distribution of Senior Welfare Centers in Busan')\n",
        "plt.xlabel('Longitude')\n",
        "plt.ylabel('Latitude')\n",
        "plt.legend(title='Operating Organization Category')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 2. Organization Type Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "df['운영단체구분내용'].value_counts().plot(kind='bar', color='skyblue')\n",
        "plt.title('Distribution of Senior Welfare Center Operating Organization Types')\n",
        "plt.xlabel('Operating Organization Category')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 3. Organizations and Number of Centers\n",
        "plt.figure(figsize=(12, 6))\n",
        "organization_counts = df['운영단체명'].value_counts()\n",
        "organization_counts.plot(kind='bar', color='lightcoral')\n",
        "plt.title('Number of Senior Welfare Centers Operated by Each Organization')\n",
        "plt.xlabel('Operating Organization Name')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EEEwqOGLP_Tb",
        "outputId": "973955da-369e-457e-a133-5ed50bb291c3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48277 (\\N{HANGUL SYLLABLE BEOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48277 (\\N{HANGUL SYLLABLE BEOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51452 (\\N{HANGUL SYLLABLE JU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45716 (\\N{HANGUL SYLLABLE NEUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 46993 (\\N{HANGUL SYLLABLE RANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51116 (\\N{HANGUL SYLLABLE JAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 47532 (\\N{HANGUL SYLLABLE RI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50724 (\\N{HANGUL SYLLABLE O}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 52852 (\\N{HANGUL SYLLABLE KA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 53440 (\\N{HANGUL SYLLABLE TA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48520 (\\N{HANGUL SYLLABLE BUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44397 (\\N{HANGUL SYLLABLE GUG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 53664 (\\N{HANGUL SYLLABLE TO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51109 (\\N{HANGUL SYLLABLE JANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44400 (\\N{HANGUL SYLLABLE GUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44288 (\\N{HANGUL SYLLABLE GWAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54812 (\\N{HANGUL SYLLABLE HYE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49352 (\\N{HANGUL SYLLABLE SAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49368 (\\N{HANGUL SYLLABLE SAEM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45824 (\\N{HANGUL SYLLABLE DAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54620 (\\N{HANGUL SYLLABLE HAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 53468 (\\N{HANGUL SYLLABLE TAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51333 (\\N{HANGUL SYLLABLE JONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51032 (\\N{HANGUL SYLLABLE YI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54840 (\\N{HANGUL SYLLABLE HO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49328 (\\N{HANGUL SYLLABLE SAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45208 (\\N{HANGUL SYLLABLE NA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48393 (\\N{HANGUL SYLLABLE BONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49373 (\\N{HANGUL SYLLABLE SAENG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48149 (\\N{HANGUL SYLLABLE BAG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 46041 (\\N{HANGUL SYLLABLE DONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 47749 (\\N{HANGUL SYLLABLE MYEONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 47928 (\\N{HANGUL SYLLABLE MUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49440 (\\N{HANGUL SYLLABLE SEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 52404 (\\N{HANGUL SYLLABLE CE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50629 (\\N{HANGUL SYLLABLE EOB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45720 (\\N{HANGUL SYLLABLE NEUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49244 (\\N{HANGUL SYLLABLE BBEUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 47560 (\\N{HANGUL SYLLABLE MA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48276 (\\N{HANGUL SYLLABLE BEOM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50612 (\\N{HANGUL SYLLABLE EO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 45432 (\\N{HANGUL SYLLABLE NO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 44305 (\\N{HANGUL SYLLABLE GWANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50669 (\\N{HANGUL SYLLABLE YEOG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 50728 (\\N{HANGUL SYLLABLE ON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-8-122d293065d6>:32: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51452 (\\N{HANGUL SYLLABLE JU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45716 (\\N{HANGUL SYLLABLE NEUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46993 (\\N{HANGUL SYLLABLE RANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51116 (\\N{HANGUL SYLLABLE JAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47532 (\\N{HANGUL SYLLABLE RI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50724 (\\N{HANGUL SYLLABLE O}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52852 (\\N{HANGUL SYLLABLE KA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53440 (\\N{HANGUL SYLLABLE TA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48520 (\\N{HANGUL SYLLABLE BUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44397 (\\N{HANGUL SYLLABLE GUG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53664 (\\N{HANGUL SYLLABLE TO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51109 (\\N{HANGUL SYLLABLE JANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44400 (\\N{HANGUL SYLLABLE GUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44288 (\\N{HANGUL SYLLABLE GWAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54812 (\\N{HANGUL SYLLABLE HYE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49352 (\\N{HANGUL SYLLABLE SAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49368 (\\N{HANGUL SYLLABLE SAEM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45824 (\\N{HANGUL SYLLABLE DAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54620 (\\N{HANGUL SYLLABLE HAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53468 (\\N{HANGUL SYLLABLE TAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51333 (\\N{HANGUL SYLLABLE JONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51032 (\\N{HANGUL SYLLABLE YI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54840 (\\N{HANGUL SYLLABLE HO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49328 (\\N{HANGUL SYLLABLE SAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45208 (\\N{HANGUL SYLLABLE NA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48393 (\\N{HANGUL SYLLABLE BONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49373 (\\N{HANGUL SYLLABLE SAENG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48149 (\\N{HANGUL SYLLABLE BAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46041 (\\N{HANGUL SYLLABLE DONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47749 (\\N{HANGUL SYLLABLE MYEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47928 (\\N{HANGUL SYLLABLE MUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49440 (\\N{HANGUL SYLLABLE SEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52404 (\\N{HANGUL SYLLABLE CE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50629 (\\N{HANGUL SYLLABLE EOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45720 (\\N{HANGUL SYLLABLE NEUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49244 (\\N{HANGUL SYLLABLE BBEUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47560 (\\N{HANGUL SYLLABLE MA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48276 (\\N{HANGUL SYLLABLE BEOM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50612 (\\N{HANGUL SYLLABLE EO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45432 (\\N{HANGUL SYLLABLE NO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44305 (\\N{HANGUL SYLLABLE GWANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50669 (\\N{HANGUL SYLLABLE YEOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50728 (\\N{HANGUL SYLLABLE ON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block generated plots, but there were warnings about missing glyphs, indicating font issues.  I will try to address the font issue by specifying a font that supports Hangul characters.  Then, I will re-generate the plots.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "il5mF4h4QCBQ"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from matplotlib import font_manager, rc\n",
        "\n",
        "# Set font for displaying Korean characters correctly\n",
        "font_path = \"/usr/share/fonts/truetype/nanum/NanumGothic.ttf\"  # Replace with the actual path if different\n",
        "font_name = font_manager.FontProperties(fname=font_path).get_name()\n",
        "rc('font', family=font_name)\n",
        "\n",
        "# 1. Geographical Distribution\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.scatterplot(data=df, x='경도', y='위도', hue='운영단체구분내용', palette='viridis', s=100)\n",
        "plt.title('Geographical Distribution of Senior Welfare Centers in Busan')\n",
        "plt.xlabel('Longitude')\n",
        "plt.ylabel('Latitude')\n",
        "plt.legend(title='Operating Organization Category')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 2. Organization Type Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "df['운영단체구분내용'].value_counts().plot(kind='bar', color='skyblue')\n",
        "plt.title('Distribution of Senior Welfare Center Operating Organization Types')\n",
        "plt.xlabel('Operating Organization Category')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 3. Organizations and Number of Centers\n",
        "plt.figure(figsize=(12, 6))\n",
        "organization_counts = df['운영단체명'].value_counts()\n",
        "organization_counts.plot(kind='bar', color='lightcoral')\n",
        "plt.title('Number of Senior Welfare Centers Operated by Each Organization')\n",
        "plt.xlabel('Operating Organization Name')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "ToNoRKCeQCRG",
        "outputId": "1669ba48-4b21-4574-cc3c-ee9aa2ef0713"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-dff8250cc1dc>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Set font for displaying Korean characters correctly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mfont_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/usr/share/fonts/truetype/nanum/NanumGothic.ttf\"\u001b[0m  \u001b[0;31m# Replace with the actual path if different\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mfont_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFontProperties\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfont_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mrc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'font'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfont_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/font_manager.py\u001b[0m in \u001b[0;36mget_name\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    729\u001b[0m         \u001b[0mReturn\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mname\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mfont\u001b[0m \u001b[0mthat\u001b[0m \u001b[0mbest\u001b[0m \u001b[0mmatches\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mfont\u001b[0m \u001b[0mproperties\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    730\u001b[0m         \"\"\"\n\u001b[0;32m--> 731\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mget_font\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfindfont\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfamily_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    732\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_style\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/font_manager.py\u001b[0m in \u001b[0;36mget_font\u001b[0;34m(font_filepaths, hinting_factor)\u001b[0m\n\u001b[1;32m   1613\u001b[0m         \u001b[0mhinting_factor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'text.hinting_factor'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1614\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1615\u001b[0;31m     return _get_font(\n\u001b[0m\u001b[1;32m   1616\u001b[0m         \u001b[0;31m# must be a tuple to be cached\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1617\u001b[0m         \u001b[0mpaths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/font_manager.py\u001b[0m in \u001b[0;36m_get_font\u001b[0;34m(font_filepaths, hinting_factor, _kerning_factor, thread_id)\u001b[0m\n\u001b[1;32m   1555\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_get_font\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfont_filepaths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhinting_factor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_kerning_factor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthread_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1556\u001b[0m     \u001b[0mfirst_fontpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mrest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont_filepaths\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1557\u001b[0;31m     return ft2font.FT2Font(\n\u001b[0m\u001b[1;32m   1558\u001b[0m         \u001b[0mfirst_fontpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhinting_factor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1559\u001b[0m         _fallback_list=[\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous attempt to set the font failed due to a `FileNotFoundError`.  Since I cannot interact with the file system to install fonts or determine the correct path, I will proceed with the visualization generation without specifying the font.  The plots will likely display the Korean text incorrectly, but I will complete the subtask as instructed, acknowledging this limitation.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "w4DcmI95QEBT"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. Geographical Distribution\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.scatterplot(data=df, x='경도', y='위도', hue='운영단체구분내용', palette='viridis', s=100)\n",
        "plt.title('Geographical Distribution of Senior Welfare Centers in Busan')\n",
        "plt.xlabel('Longitude')\n",
        "plt.ylabel('Latitude')\n",
        "plt.legend(title='Operating Organization Category')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 2. Organization Type Distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "df['운영단체구분내용'].value_counts().plot(kind='bar', color='skyblue')\n",
        "plt.title('Distribution of Senior Welfare Center Operating Organization Types')\n",
        "plt.xlabel('Operating Organization Category')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# 3. Organizations and Number of Centers\n",
        "plt.figure(figsize=(12, 6))\n",
        "organization_counts = df['운영단체명'].value_counts()\n",
        "organization_counts.plot(kind='bar', color='lightcoral')\n",
        "plt.title('Number of Senior Welfare Centers Operated by Each Organization')\n",
        "plt.xlabel('Operating Organization Name')\n",
        "plt.ylabel('Number of Centers')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KFi3mG9uQERJ",
        "outputId": "d35f15d7-a91b-4380-c2a2-c38ad8bf193d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48277 (\\N{HANGUL SYLLABLE BEOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48277 (\\N{HANGUL SYLLABLE BEOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51452 (\\N{HANGUL SYLLABLE JU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45716 (\\N{HANGUL SYLLABLE NEUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 46993 (\\N{HANGUL SYLLABLE RANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51116 (\\N{HANGUL SYLLABLE JAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 47532 (\\N{HANGUL SYLLABLE RI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50724 (\\N{HANGUL SYLLABLE O}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 52852 (\\N{HANGUL SYLLABLE KA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 53440 (\\N{HANGUL SYLLABLE TA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48520 (\\N{HANGUL SYLLABLE BUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44397 (\\N{HANGUL SYLLABLE GUG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 53664 (\\N{HANGUL SYLLABLE TO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51109 (\\N{HANGUL SYLLABLE JANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44400 (\\N{HANGUL SYLLABLE GUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44288 (\\N{HANGUL SYLLABLE GWAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54812 (\\N{HANGUL SYLLABLE HYE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49352 (\\N{HANGUL SYLLABLE SAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49368 (\\N{HANGUL SYLLABLE SAEM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45824 (\\N{HANGUL SYLLABLE DAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54620 (\\N{HANGUL SYLLABLE HAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 53468 (\\N{HANGUL SYLLABLE TAE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51333 (\\N{HANGUL SYLLABLE JONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51032 (\\N{HANGUL SYLLABLE YI}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54840 (\\N{HANGUL SYLLABLE HO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49328 (\\N{HANGUL SYLLABLE SAN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45208 (\\N{HANGUL SYLLABLE NA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48393 (\\N{HANGUL SYLLABLE BONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49373 (\\N{HANGUL SYLLABLE SAENG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48149 (\\N{HANGUL SYLLABLE BAG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 46041 (\\N{HANGUL SYLLABLE DONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 47749 (\\N{HANGUL SYLLABLE MYEONG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 47928 (\\N{HANGUL SYLLABLE MUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49440 (\\N{HANGUL SYLLABLE SEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 52404 (\\N{HANGUL SYLLABLE CE}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50629 (\\N{HANGUL SYLLABLE EOB}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45720 (\\N{HANGUL SYLLABLE NEUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49244 (\\N{HANGUL SYLLABLE BBEUN}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 47560 (\\N{HANGUL SYLLABLE MA}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48276 (\\N{HANGUL SYLLABLE BEOM}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50612 (\\N{HANGUL SYLLABLE EO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 45432 (\\N{HANGUL SYLLABLE NO}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 44305 (\\N{HANGUL SYLLABLE GWANG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50669 (\\N{HANGUL SYLLABLE YEOG}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 50728 (\\N{HANGUL SYLLABLE ON}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-10-122d293065d6>:32: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51452 (\\N{HANGUL SYLLABLE JU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45716 (\\N{HANGUL SYLLABLE NEUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46993 (\\N{HANGUL SYLLABLE RANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48373 (\\N{HANGUL SYLLABLE BOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51116 (\\N{HANGUL SYLLABLE JAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45800 (\\N{HANGUL SYLLABLE DAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47532 (\\N{HANGUL SYLLABLE RI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50724 (\\N{HANGUL SYLLABLE O}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52852 (\\N{HANGUL SYLLABLE KA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53440 (\\N{HANGUL SYLLABLE TA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48520 (\\N{HANGUL SYLLABLE BUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44397 (\\N{HANGUL SYLLABLE GUG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53664 (\\N{HANGUL SYLLABLE TO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51109 (\\N{HANGUL SYLLABLE JANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44400 (\\N{HANGUL SYLLABLE GUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44288 (\\N{HANGUL SYLLABLE GWAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44277 (\\N{HANGUL SYLLABLE GONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54812 (\\N{HANGUL SYLLABLE HYE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49352 (\\N{HANGUL SYLLABLE SAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49368 (\\N{HANGUL SYLLABLE SAEM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45824 (\\N{HANGUL SYLLABLE DAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54620 (\\N{HANGUL SYLLABLE HAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44368 (\\N{HANGUL SYLLABLE GYO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53468 (\\N{HANGUL SYLLABLE TAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51333 (\\N{HANGUL SYLLABLE JONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51032 (\\N{HANGUL SYLLABLE YI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54840 (\\N{HANGUL SYLLABLE HO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49328 (\\N{HANGUL SYLLABLE SAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45208 (\\N{HANGUL SYLLABLE NA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48393 (\\N{HANGUL SYLLABLE BONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49373 (\\N{HANGUL SYLLABLE SAENG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54924 (\\N{HANGUL SYLLABLE HOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48149 (\\N{HANGUL SYLLABLE BAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54617 (\\N{HANGUL SYLLABLE HAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 46041 (\\N{HANGUL SYLLABLE DONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47749 (\\N{HANGUL SYLLABLE MYEONG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47928 (\\N{HANGUL SYLLABLE MUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49440 (\\N{HANGUL SYLLABLE SEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54633 (\\N{HANGUL SYLLABLE HAB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52404 (\\N{HANGUL SYLLABLE CE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51064 (\\N{HANGUL SYLLABLE IN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50629 (\\N{HANGUL SYLLABLE EOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45720 (\\N{HANGUL SYLLABLE NEUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49244 (\\N{HANGUL SYLLABLE BBEUN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47560 (\\N{HANGUL SYLLABLE MA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51012 (\\N{HANGUL SYLLABLE EUL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48276 (\\N{HANGUL SYLLABLE BEOM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50612 (\\N{HANGUL SYLLABLE EO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45432 (\\N{HANGUL SYLLABLE NO}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44305 (\\N{HANGUL SYLLABLE GWANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50669 (\\N{HANGUL SYLLABLE YEOG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 50728 (\\N{HANGUL SYLLABLE ON}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Summary:\n",
        "\n",
        "### 1. Q&A\n",
        "\n",
        "The analysis aimed to understand the characteristics of senior welfare centers in Busan.  The key questions addressed were:\n",
        "\n",
        "* **Geographical Distribution:** Where are the centers located, and is there a pattern based on the type of organization operating them?\n",
        "* **Organization Types:** What are the different types of organizations running these centers, and which are most prevalent?\n",
        "* **Organizational Presence:** Which organizations operate the most centers, and are there any organizations with a disproportionately large number of centers?\n",
        "\n",
        "### 2. Data Analysis Key Findings\n",
        "\n",
        "* **Geographical Clustering:** The analysis revealed the geographical distribution of senior welfare centers, visualized through a scatter plot.  Longitude ranges from 128.83 to 129.24, and latitude ranges from 35.06 to 35.32.  The visualization helps identify potential clusters or areas with higher concentrations of centers.\n",
        "* **Dominant Organization Type:**  Social Welfare Corporations ('사회복지법인') operate the majority (29 out of 35) of the senior welfare centers in Busan.\n",
        "* **Largest Operator:** '주는사랑복지재단' operates the most centers (6 out of 35), suggesting a significant presence in providing senior welfare services.\n",
        "\n",
        "### 3. Insights or Next Steps\n",
        "\n",
        "* **Spatial Analysis:** Conduct more in-depth spatial analysis to understand the relationship between center locations, demographics, and service needs in different areas of Busan.\n",
        "* **Comparative Analysis:** Compare the services provided by different organization types to identify potential disparities or areas for improvement.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "FR58OZ2-QJwj"
      }
    }
  ]
}